# This file is part of lodn.

# lodn is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# lodn is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# lodn. If not, see <https://www.gnu.org/licenses/>.
from tkinter import Frame, ttk, Label, Entry, END, OptionMenu, StringVar
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GObject  # noqa E402

gi.require_version('GstVideo', '1.0')
from gi.repository import GstVideo  # noqa E402,F401
from lodn.catalog.material import Material  # noqa E402
from lodn.catalog.category import Category  # noqa E402


class CatalogTab(Frame):
    fields = ["name", "category", "comment", "diameter", "height",
              "length", "materials", "quotation", "width"]

    def __init__(self, parent, catalog):
        Frame.__init__(self, parent)
        self.grid_rowconfigure(0, weight=1)
        self.__catalog = catalog
        self.__parent = parent
        self.__default_item = "I001"

        self.__setup_treeview()
        self.__setup_controls()

    def __setup_treeview(self):
        self.__treeview = tv = ttk.Treeview(
            self,
            show="",  # disable first column and headings
            columns=("name"),
            selectmode="browse"
        )
        for o in self.__catalog.catalog:
            tv.insert("", END, values=(o.name,))
        tv.bind('<<TreeviewSelect>>', self.__on_treeview_select)
        nb_items = len(CatalogTab.fields)
        tv.grid(column=0, row=0, sticky="nsw", rowspan=nb_items)
        # we set the selection AND the focus so that the event generated by
        # the selection_set allows tv.focus() to return a valid item index
        tv.focus(self.__default_item)
        tv.selection_set(self.__default_item)

    def __setup_name(self):
        self.__name_entry = Entry(self)
        self.__name_entry.grid(row=0, column=2, sticky="we", padx=(6, 6),
                               pady=(6, 6))

    def __setup_category(self):
        self.__category_var = var = StringVar(self)
        categories = [c.value for c in Category]
        self.__category = OptionMenu(self, var, *categories)
        self.__category.grid(row=1, column=2, sticky="we", padx=(6, 6),
                             pady=(6, 6))

    def __setup_materials(self):
        self.__materials = materials = ttk.Treeview(self, show="",
                                                    columns=("name"))
        materials.grid(column=2, row=6, sticky="nsew")
        for c in Material:
            materials.insert("", END, values=(c.value,))

    def __setup_controls(self):
        # frame = Frame
        i = 0
        for f in CatalogTab.fields:
            label = Label(self, text=f)
            label.grid(row=i, column=1, sticky="w", padx=(6, 6), pady=(6, 6))
            i += 1

        self.__setup_name()
        self.__setup_category()
        self.__setup_materials()

    def __get_current_origami(self):
        tv = self.__treeview
        index = tv.focus()
        item = tv.item(index)
        name = item["values"][0]

        return self.__catalog.get_by_name(name)

    def __update_name(self, origami):
        self.__name_entry.delete(0, END)
        self.__name_entry.insert(END, origami.name)

    def __update_category(self, origami):
        self.__category_var.set(origami.category)

    @staticmethod
    def __materials_to_selection(materials):
        i = 1
        res = []

        for m in Material:
            if m.value in materials:
                res.append(f"I00{i}")
            i += 1

        return res

    def __update_materials(self, origami):
        selection = self.__materials_to_selection(origami.materials)
        m = self.__materials
        m.selection_set(selection)

    def __on_treeview_select(self, event):
        # TODO here save the previous item if any
        origami = self.__get_current_origami()
        self.__update_name(origami)
        self.__update_category(origami)
        self.__update_materials(origami)

    def stop_video(self):
        print("stop_video")
