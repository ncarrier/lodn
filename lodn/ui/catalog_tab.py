# This file is part of lodn.

# lodn is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# lodn is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# lodn. If not, see <https://www.gnu.org/licenses/>.
from tkinter import Frame, ttk, Label, Entry, END, OptionMenu
from tkinter.filedialog import askopenfilename
from tkinter import INSERT
from tkinter.filedialog import askdirectory
from lodn.catalog.material import Material
from lodn.catalog.category import Category
from lodn.catalog.origami_variables import OrigamiVariables
from lodn.ui.ttk_scrolled_text import TTKScrolledText
import subprocess
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GObject  # noqa E402

gi.require_version('GstVideo', '1.0')
from gi.repository import GstVideo  # noqa E402,F401


class CatalogTab(Frame):
    fields = [
        "name",
        "reference",
        "category",
        "comment",
        "paper size (mm)",
        "diameter (mm)",
        "height (mm)",
        "length (mm)",
        "width (mm)",
        "materials",
        "quotation for 10 (min)"
    ]

    def __init__(self, parent, catalog):
        Frame.__init__(self, parent)
        self.__catalog = catalog
        self.__parent = parent
        self.__default_item = "I001"
        self.__origami = None

        self.__ori_var = OrigamiVariables()
        self.__setup_treeview()
        self.__setup_controls()
        self.__setup_photo()
        self.__setup_instructions()
        self.__setup_export()
        self.__setup_autonumber()

    def __setup_treeview(self):
        self.__treeview = tv = ttk.Treeview(
            self,
            show="",  # disable first column and headings
            columns=("name"),
            selectmode="browse"
        )
        for o in self.__catalog.catalog:
            tv.insert("", END, values=(o.name,))
        tv.bind('<<TreeviewSelect>>', self.__on_treeview_select)
        nb_items = len(CatalogTab.fields)
        tv.grid(column=0, row=0, sticky="nsw", rowspan=nb_items)
        # we set the selection AND the focus so that the event generated by
        # the selection_set allows tv.focus() to return a valid item index
        tv.focus(self.__default_item)
        tv.selection_set(self.__default_item)

    def __setup_name(self):
        self.__name_entry = Entry(self, textvariable=self.__ori_var.name)
        self.__name_entry.grid(row=0, column=2, sticky="we", padx=(6, 6),
                               pady=(6, 6), columnspan=2)

    def __setup_reference(self):
        self.__reference = ttk.Spinbox(
            self,
            from_=0,
            textvariable=self.__ori_var.reference,
            width=3
        )
        self.__reference.grid(row=1, column=2, sticky="we", padx=(6, 6),
                              pady=(6, 6), columnspan=2)

    def __setup_category(self):
        categories = [c.value for c in Category]
        self.__category = OptionMenu(self, self.__ori_var.category,
                                     *categories)
        self.__category.grid(row=2, column=2, sticky="we", padx=(6, 6),
                             pady=(6, 6), columnspan=2)

    def __set_command_string_var(self, event):
        self.__ori_var.comment.set(self.__comment.get("1.0", END))

    def __setup_comment(self):
        self.__comment = TTKScrolledText(self, height=4)
        self.__comment.bind('<KeyRelease>', self.__set_command_string_var)
        self.__comment.grid(row=3, column=2, sticky="nswe", padx=(6, 6),
                            pady=(6, 6), columnspan=2)

    def __setup_paper_size(self):
        self.__paper_size = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.paper_size,
            width=3
        )
        self.__paper_size.grid(row=4, column=2, sticky="we", padx=(6, 6),
                               pady=(6, 6), columnspan=2)

    def __setup_diameter(self):
        self.__diameter = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.diameter,
            width=3
        )
        self.__diameter.grid(row=5, column=2, sticky="we", padx=(6, 6),
                             pady=(6, 6), columnspan=2)

    def __setup_height(self):
        self.__height = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.height,
            width=3
        )
        self.__height.grid(row=6, column=2, sticky="we", padx=(6, 6),
                           pady=(6, 6), columnspan=2)

    def __setup_length(self):
        self.__length = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.length,
            width=3
        )
        self.__length.grid(row=7, column=2, sticky="we", padx=(6, 6),
                           pady=(6, 6), columnspan=2)

    def __setup_width(self):
        self.__width = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.width,
            width=3
        )
        self.__width.grid(row=8, column=2, sticky="we", padx=(6, 6),
                          pady=(6, 6), columnspan=2)

    def __setup_materials(self):
        materials_list = [m.value for m in list(Material)]

        self.__materials = mtv = ttk.Treeview(
            self,
            show="",
            columns=("material"),
            selectmode="extended",
            height=5
        )

        for m in materials_list:
            mtv.insert("", END, values=(m,))
        s = ttk.Scrollbar(self, orient="vertical")
        s.config(command=mtv.yview)
        mtv.config(yscrollcommand=s.set)
        s.grid(column=3, row=9, sticky="nsw")
        mtv.grid(column=2, row=9, sticky="nsew")

    def __setup_quotation(self):
        self.__quotation = ttk.Spinbox(
            self,
            from_=0,
            to=1000,
            textvariable=self.__ori_var.quotation,
            width=3
        )
        self.__quotation.grid(row=10, column=2, sticky="we", padx=(6, 6),
                              pady=(6, 6), columnspan=2)

    def __photo_on_clicked(self, event):
        photo_path = askopenfilename(
            parent=self,
            title="Choose Origami photo",
            filetypes=[("jpg image", "*.jpg")]
        )
        if not photo_path:
            return

        self.__origami.photo = photo_path
        self.__update_photo(self.__origami)

    def __setup_photo(self):
        self.__photo = photo = ttk.Label(self, cursor="hand2")
        photo.grid(row=0, column=4, sticky="nswe", padx=(6, 6), pady=(6, 6),
                   rowspan=9)
        photo.bind("<Button-1>", self.__photo_on_clicked)

    def __instr_on_clicked(self, event):
        instructions = self.__origami.instructions
        if instructions is not None:
            subprocess.Popen(["xdg-open", instructions])

    def __setup_instructions(self):
        self.__instructions = instr = ttk.Label(self, cursor="hand2")
        instr.grid(row=10, column=4, sticky="we", padx=(6, 6), pady=(6, 6),
                   rowspan=1)
        instr.bind("<Button-1>", self.__instr_on_clicked)

    def __export_button_on_clicked(self):
        folder_path = askdirectory(
            parent=self,
            title="Choose website folder"
        )
        self.__update_materials(self.__origami)
        if not folder_path:
            return

        self.__save_current_origami(self.__treeview)

        self.__catalog.export(folder_path)

    def __setup_export(self):
        self.__export_button = ttk.Button(
            self, text="Export",
            command=self.__export_button_on_clicked
        )
        self.__export_button.grid(column=4, row=11, pady=3, padx=3)

    def __autonumber_button_on_clicked(self):
        print("clicked")

    def __setup_autonumber(self):
        self.__autonumber_button = ttk.Button(
            self, text="Autonumber",
            command=self.__autonumber_button_on_clicked
        )
        self.__autonumber_button.grid(column=3, row=11, pady=3, padx=3)

    def __setup_controls(self):
        i = 0
        for f in CatalogTab.fields:
            label = Label(self, text=f)
            label.grid(row=i, column=1, sticky="w", padx=(6, 6), pady=(6, 6))
            i += 1

        self.__setup_name()
        self.__setup_reference()
        self.__setup_category()
        self.__setup_comment()
        self.__setup_paper_size()
        self.__setup_diameter()
        self.__setup_height()
        self.__setup_length()
        self.__setup_width()
        self.__setup_materials()
        self.__setup_quotation()

    def __get_current_origami(self):
        tv = self.__treeview
        index = tv.focus()
        item = tv.item(index)
        name = item["values"][0]

        return self.__catalog.get_by_name(name)

    def __update_name(self, origami):
        self.__name_entry.delete(0, END)
        self.__name_entry.insert(END, origami.name)

    def __update_category(self, origami):
        self.__ori_var.category.set(origami.category)

    def __update_reference(self, origami):
        self.__ori_var.reference.set(origami.reference)

    def __update_comment(self, origami):
        self.__ori_var.comment.set(origami.comment)
        self.__comment.delete("1.0", END)
        self.__comment.insert(INSERT, origami.comment)

    def __update_diameter(self, origami):
        self.__ori_var.diameter.set(origami.diameter)

    def __update_height(self, origami):
        self.__ori_var.height.set(origami.height)

    def __update_length(self, origami):
        self.__ori_var.length.set(origami.length)

    def __update_paper_size(self, origami):
        self.__ori_var.paper_size.set(origami.paper_size)

    def __update_width(self, origami):
        self.__ori_var.width.set(origami.width)

    def __update_materials(self, origami):
        self.__materials.selection_set(())
        i = 1
        for m in Material:
            if m.value in origami.materials:
                self.__materials.selection_add(f"I00{i}")
            i += 1

    def __update_quotation(self, origami):
        self.__ori_var.quotation.set(origami.quotation)

    def __update_photo(self, origami):
        self.__photo.config(image=origami.photo)

    def __update_instructions(self, origami):
        if origami.has_instructions:
            self.__instructions.config(text="instructions are present")
        else:
            self.__instructions.config(text="no instructions available")

    def __save(self, origami):
        i = 1
        self.__ori_var.materials = []
        for m in Material:
            if f"I00{i}" in self.__materials.selection():
                self.__ori_var.materials.append(m.value)
            i += 1
        origami.save(self.__ori_var)

    def __save_current_origami(self, tv):
        origami = self.__origami
        if origami is not None:
            self.__save(origami)
            # update the name of the previous origami in the treeview too.
            tv.item(self.__previous_selected_item, values=(origami.name,))

    def __on_treeview_select(self, event):
        tv = self.__treeview

        self.__save_current_origami(tv)

        origami = self.__get_current_origami()
        self.__update_name(origami)
        self.__update_reference(origami)
        self.__update_category(origami)
        self.__update_comment(origami)
        self.__update_paper_size(origami)
        self.__update_diameter(origami)
        self.__update_height(origami)
        self.__update_length(origami)
        self.__update_width(origami)
        self.__update_materials(origami)
        self.__update_quotation(origami)
        self.__update_photo(origami)
        self.__update_instructions(origami)

        self.__origami = origami
        self.__previous_selected_item = tv.selection()[0]
